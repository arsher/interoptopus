// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

namespace My.Company.Common
{

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec
    {
        public double x;
        public double z;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceBool
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceBool : IEnumerable<Bool>
    {
        public SliceBool(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceBool(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<Bool> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<Bool>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Bool this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (Bool*) data.ToPointer();
                return d[i];
            }
        }
        public unsafe Bool[] Copied
        {
            get
            {
                var rval = new Bool[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(Bool));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<Bool> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceI32
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceI32 : IEnumerable<int>
    {
        public SliceI32(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceI32(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<int> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<int>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe int this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (int*) data.ToPointer();
                return d[i];
            }
        }
        public unsafe int[] Copied
        {
            get
            {
                var rval = new int[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(int));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<int> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceU32
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceU32 : IEnumerable<uint>
    {
        public SliceU32(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceU32(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<uint>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (uint*) data.ToPointer();
                return d[i];
            }
        }
        public unsafe uint[] Copied
        {
            get
            {
                var rval = new uint[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(uint));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceU8
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceU8 : IEnumerable<byte>
    {
        public SliceU8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceU8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<byte>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (byte*) data.ToPointer();
                return d[i];
            }
        }
        public unsafe byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(byte));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceVec
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceVec : IEnumerable<Vec>
    {
        public SliceVec(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceVec(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<Vec> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<Vec>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Vec this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (Vec*) data.ToPointer();
                return d[i];
            }
        }
        public unsafe Vec[] Copied
        {
            get
            {
                var rval = new Vec[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(Vec));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<Vec> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceMutU32
    {
        ///Pointer to start of mutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceMutU32 : IEnumerable<uint>
    {
        public SliceMutU32(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceMutU32(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<uint>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Span<uint> Span
        {
            get
            {
                unsafe
                {
                    return new Span<uint>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (uint*) data.ToPointer();
                return d[i];
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (uint*) data.ToPointer();
                d[i] = value;
            }
        }
        public unsafe uint[] Copied
        {
            get
            {
                var rval = new uint[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(uint));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceMutU8
    {
        ///Pointer to start of mutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceMutU8 : IEnumerable<byte>
    {
        public SliceMutU8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceMutU8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<byte>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Span<byte> Span
        {
            get
            {
                unsafe
                {
                    return new Span<byte>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (byte*) data.ToPointer();
                return d[i];
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (byte*) data.ToPointer();
                d[i] = value;
            }
        }
        public unsafe byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(byte));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceMutVec
    {
        ///Pointer to start of mutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceMutVec : IEnumerable<Vec>
    {
        public SliceMutVec(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceMutVec(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public unsafe ReadOnlySpan<Vec> ReadOnlySpan
        {
            get
            {
                unsafe
                {
                    return new ReadOnlySpan<Vec>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Span<Vec> Span
        {
            get
            {
                unsafe
                {
                    return new Span<Vec>(this.data.ToPointer(), (int) this.len);
                }
            }
        }
        public unsafe Vec this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (Vec*) data.ToPointer();
                return d[i];
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (Vec*) data.ToPointer();
                d[i] = value;
            }
        }
        public unsafe Vec[] Copied
        {
            get
            {
                var rval = new Vec[len];
                fixed (void* dst = rval)
                {
                    Unsafe.CopyBlock(dst, data.ToPointer(), (uint) len * (uint) sizeof(Vec));
                    for (var i = 0; i < (int) len; i++) {
                        rval[i] = this[i];
                    }
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<Vec> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [NativeMarshalling(typeof(OptionVecMarshaller))]
    public partial struct OptionVec
    {
        ///Element that is maybe valid.
        internal Vec t;
        ///Byte where `1` means element `t` is valid.
        internal byte is_some;
    }

    [CustomMarshaller(typeof(OptionVec), MarshalMode.Default, typeof(OptionVecMarshaller))]
    internal static class OptionVecMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Vec t;
            public byte is_some;
        }

        public static Unmanaged ConvertToUnmanaged(OptionVec managed)
        {
            var result = new Unmanaged
            {
                t = managed.t,
                is_some = managed.is_some,
            };

            unsafe
            {
            }

            return result;
        }

        public static OptionVec ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new OptionVec()
            {
                t = unmanaged.t,
                is_some = unmanaged.is_some,
            };

            unsafe
            {
            }

            return result;
        }
    }


    public partial struct OptionVec
    {
        public static OptionVec FromNullable(Vec? nullable)
        {
            var result = new OptionVec();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Vec? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Vec?)null;
        }
    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Bool
    {
        byte value;
    }

    public partial struct Bool
    {
        public static readonly Bool True = new Bool { value =  1 };
        public static readonly Bool False = new Bool { value =  0 };
        public Bool(bool b)
        {
            value = (byte) (b ? 1 : 0);
        }
        public bool Is => value == 1;
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNamespaced(uint value);



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
